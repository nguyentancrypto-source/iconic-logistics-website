name: CI

on:
  push:
    branches: ['dev', 'main', 'ui-ux/**', 'feat/ui-ux-*']
  pull_request:
    branches: ['dev', 'main']
  workflow_dispatch:
    inputs:
      target_branch:
        description: "Branch to run CI against (optional)"
        required: false
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm run typecheck
      - run: npm run lint
      # Retry potentially flaky steps to reduce false negatives
      - name: Run tests (retry)
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: npm test
      - name: Build (retry)
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: npm run build

      # Start preview server in background
      - name: Start preview server
        run: npm run preview &
      - name: Wait for preview
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 3
          max_attempts: 3
          command: npx wait-on http://localhost:4173

      # Run Lighthouse CI
      - name: Run Lighthouse CI (retry)
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 2
          command: npm run lhci:ci
      - name: Upload LHCI report artifact
        uses: actions/upload-artifact@v4
        with:
          name: lhci-report
          path: lhci-report

      # Run axe-core a11y
      - name: Run axe-core a11y (retry)
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 2
          command: npm run axe:ci
      - name: Upload axe report artifact
        uses: actions/upload-artifact@v4
        with:
          name: axe-report
          path: axe-report.json

      # Sticky comment to PR with preview, Lighthouse, a11y
      - name: Comment PR with Preview, Lighthouse, a11y
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: auto-review
          message: |
            üöÄ **Preview:** [GitHub Pages Preview](https://nguyentancrypto-source.github.io/iconic-logistics-website/)
            
            üü¢ **Lighthouse:**
            - Xem chi ti·∫øt artifact [lhci-report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ‚ôø **A11y (axe):**
            - Xem chi ti·∫øt artifact [axe-report.json](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

      # Telegram notifications
      - name: Collect PR details (title, files)
        if: success() && github.event_name == 'pull_request'
        id: changed
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const number = context.payload.pull_request.number;
            const title = context.payload.pull_request.title;
            const url = context.payload.pull_request.html_url;
            let files = [];
            const per_page = 100;
            for (let page = 1; page <= 10; page++) {
              const res = await github.rest.pulls.listFiles({ owner, repo, pull_number: number, per_page, page });
              files = files.concat(res.data);
              if (res.data.length < per_page) break;
            }
            const top = files.slice(0, 10).map(f => `- ${f.filename} (+${f.additions}/-${f.deletions})`).join('\n');
            const more = files.length > 10 ? `\n‚Ä¶ and ${files.length - 10} more files` : '';
            core.setOutput('title', title);
            core.setOutput('url', url);
            core.setOutput('files', top + more);
      - name: Notify Telegram on failure (PR, final attempt)
        if: failure() && github.event_name == 'pull_request' && github.run_attempt >= 3
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -z "$BOT_TOKEN" ] || [ -z "$CHAT_ID" ]; then
            echo "Telegram secrets not set, skipping notification."
            exit 0
          fi
          PR_NUMBER=${{ github.event.pull_request.number }}
          
          TEXT="üî¥ *CI th·∫•t b·∫°i (l·∫ßn cu·ªëi)*"$'\n\n'
          TEXT+="‚ö†Ô∏è *C·∫£nh b√°o:* PR #$PR_NUMBER ƒë√£ retry nhi·ªÅu l·∫ßn nh∆∞ng v·∫´n fail"$'\n\n'
          TEXT+="üì¶ *Th√¥ng tin:*"$'\n'
          TEXT+="‚Ä¢ Repo: \`${{ github.repository }}\`"$'\n'
          TEXT+="‚Ä¢ Branch: \`${{ github.head_ref || github.ref_name }}\`"$'\n'
          TEXT+="‚Ä¢ PR: #$PR_NUMBER"$'\n\n'
          TEXT+="üîß *C·∫ßn ki·ªÉm tra:*"$'\n'
          TEXT+="‚Ä¢ Code c√≥ l·ªói syntax"$'\n'
          TEXT+="‚Ä¢ Tests kh√¥ng pass"$'\n'
          TEXT+="‚Ä¢ Build errors"$'\n\n'
          TEXT+="üîó [Xem workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          
          curl -s --data-urlencode "chat_id=$CHAT_ID" --data-urlencode "text=$TEXT" --data-urlencode "parse_mode=Markdown" "https://api.telegram.org/bot$BOT_TOKEN/sendMessage"

      - name: Notify Telegram on success (PR only)
        if: success() && github.event_name == 'pull_request'
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -z "$BOT_TOKEN" ] || [ -z "$CHAT_ID" ]; then
            echo "Telegram secrets not set, skipping notification."
            exit 0
          fi
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_TITLE="${{ steps.changed.outputs.title }}"
          PR_URL="${{ steps.changed.outputs.url }}"
          FILES=$(echo "${{ steps.changed.outputs.files }}")
          
          TEXT="‚úÖ *CI th√†nh c√¥ng!*"$'\n\n'
          TEXT+="üì¶ *Th√¥ng tin PR:*"$'\n'
          TEXT+="‚Ä¢ Repo: \`${{ github.repository }}\`"$'\n'
          TEXT+="‚Ä¢ PR #$PR_NUMBER: $PR_TITLE"$'\n'
          TEXT+="‚Ä¢ Branch: \`${{ github.head_ref || github.ref_name }}\`"$'\n\n'
          TEXT+="üìÑ *Files thay ƒë·ªïi:*"$'\n'
          TEXT+="$FILES"$'\n\n'
          TEXT+="üöÄ *Tr·∫°ng th√°i:* S·∫µn s√†ng auto-merge khi t·∫•t c·∫£ checks ho√†n th√†nh"$'\n\n'
          TEXT+="üîó *Li√™n k·∫øt:*"$'\n'
          TEXT+="‚Ä¢ [Xem PR]($PR_URL)"$'\n'
          TEXT+="‚Ä¢ [Workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          
          curl -s --data-urlencode "chat_id=$CHAT_ID" --data-urlencode "text=$TEXT" --data-urlencode "parse_mode=Markdown" "https://api.telegram.org/bot$BOT_TOKEN/sendMessage"
